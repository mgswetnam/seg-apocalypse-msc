{"version":3,"file":"modernizr.min.js","sources":["modernizr.js"],"sourcesContent":["/*!\n * modernizr v3.11.7\n * Build https://modernizr.com/download?-addtest-printshiv-setclasses-testprop-dontmin\n *\n * Copyright (c)\n *  Faruk Ates\n *  Paul Irish\n *  Alex Sexton\n *  Ryan Seddon\n *  Patrick Kettner\n *  Stu Cox\n *  Richard Herrera\n *  Veeck\n\n * MIT License\n */\n\n/*\n * Modernizr tests which native CSS3 and HTML5 features are available in the\n * current UA and makes the results available to you in two ways: as properties on\n * a global `Modernizr` object, and as classes on the `<html>` element. This\n * information allows you to progressively enhance your pages with a granular level\n * of control over the experience.\n*/\n\n;(function(scriptGlobalObject, window, document, undefined){\n\n  var tests = [];\n  \n\n  /**\n   * ModernizrProto is the constructor for Modernizr\n   *\n   * @class\n   * @access public\n   */\n  var ModernizrProto = {\n    _version: '3.11.7',\n\n    // Any settings that don't work as separate modules\n    // can go in here as configuration.\n    _config: {\n      'classPrefix': '',\n      'enableClasses': true,\n      'enableJSClass': true,\n      'usePrefixes': true\n    },\n\n    // Queue of tests\n    _q: [],\n\n    // Stub these for people who are listening\n    on: function(test, cb) {\n      // I don't really think people should do this, but we can\n      // safe guard it a bit.\n      // -- NOTE:: this gets WAY overridden in src/addTest for actual async tests.\n      // This is in case people listen to synchronous tests. I would leave it out,\n      // but the code to *disallow* sync tests in the real version of this\n      // function is actually larger than this.\n      var self = this;\n      setTimeout(function() {\n        cb(self[test]);\n      }, 0);\n    },\n\n    addTest: function(name, fn, options) {\n      tests.push({name: name, fn: fn, options: options});\n    },\n\n    addAsyncTest: function(fn) {\n      tests.push({name: null, fn: fn});\n    }\n  };\n\n  \n\n  // Fake some of Object.create so we can force non test results to be non \"own\" properties.\n  var Modernizr = function() {};\n  Modernizr.prototype = ModernizrProto;\n\n  // Leak modernizr globally when you `require` it rather than force it here.\n  // Overwrite name so constructor name is nicer :D\n  Modernizr = new Modernizr();\n\n  \n\n  var classes = [];\n  \n\n  /**\n   * is returns a boolean if the typeof an obj is exactly type.\n   *\n   * @access private\n   * @function is\n   * @param {*} obj - A thing we want to check the type of\n   * @param {string} type - A string to compare the typeof against\n   * @returns {boolean} true if the typeof the first parameter is exactly the specified type, false otherwise\n   */\n  function is(obj, type) {\n    return typeof obj === type;\n  }\n\n  ;\n\n  /**\n   * Run through all tests and detect their support in the current UA.\n   *\n   * @access private\n   * @returns {void}\n   */\n  function testRunner() {\n    var featureNames;\n    var feature;\n    var aliasIdx;\n    var result;\n    var nameIdx;\n    var featureName;\n    var featureNameSplit;\n\n    for (var featureIdx in tests) {\n      if (tests.hasOwnProperty(featureIdx)) {\n        featureNames = [];\n        feature = tests[featureIdx];\n        // run the test, throw the return value into the Modernizr,\n        // then based on that boolean, define an appropriate className\n        // and push it into an array of classes we'll join later.\n        //\n        // If there is no name, it's an 'async' test that is run,\n        // but not directly added to the object. That should\n        // be done with a post-run addTest call.\n        if (feature.name) {\n          featureNames.push(feature.name.toLowerCase());\n\n          if (feature.options && feature.options.aliases && feature.options.aliases.length) {\n            // Add all the aliases into the names list\n            for (aliasIdx = 0; aliasIdx < feature.options.aliases.length; aliasIdx++) {\n              featureNames.push(feature.options.aliases[aliasIdx].toLowerCase());\n            }\n          }\n        }\n\n        // Run the test, or use the raw value if it's not a function\n        result = is(feature.fn, 'function') ? feature.fn() : feature.fn;\n\n        // Set each of the names on the Modernizr object\n        for (nameIdx = 0; nameIdx < featureNames.length; nameIdx++) {\n          featureName = featureNames[nameIdx];\n          // Support dot properties as sub tests. We don't do checking to make sure\n          // that the implied parent tests have been added. You must call them in\n          // order (either in the test, or make the parent test a dependency).\n          //\n          // Cap it to TWO to make the logic simple and because who needs that kind of subtesting\n          // hashtag famous last words\n          featureNameSplit = featureName.split('.');\n\n          if (featureNameSplit.length === 1) {\n            Modernizr[featureNameSplit[0]] = result;\n          } else {\n            // cast to a Boolean, if not one already or if it doesnt exist yet (like inputtypes)\n            if (!Modernizr[featureNameSplit[0]] || Modernizr[featureNameSplit[0]] && !(Modernizr[featureNameSplit[0]] instanceof Boolean)) {\n              Modernizr[featureNameSplit[0]] = new Boolean(Modernizr[featureNameSplit[0]]);\n            }\n\n            Modernizr[featureNameSplit[0]][featureNameSplit[1]] = result;\n          }\n\n          classes.push((result ? '' : 'no-') + featureNameSplit.join('-'));\n        }\n      }\n    }\n  }\n  ;\n\n  /**\n   * docElement is a convenience wrapper to grab the root element of the document\n   *\n   * @access private\n   * @returns {HTMLElement|SVGElement} The root element of the document\n   */\n  var docElement = document.documentElement;\n  \n\n  /**\n   * A convenience helper to check if the document we are running in is an SVG document\n   *\n   * @access private\n   * @returns {boolean}\n   */\n  var isSVG = docElement.nodeName.toLowerCase() === 'svg';\n\n  \n\n  /**\n   * setClasses takes an array of class names and adds them to the root element\n   *\n   * @access private\n   * @function setClasses\n   * @param {string[]} classes - Array of class names\n   */\n  // Pass in an and array of class names, e.g.:\n  //  ['no-webp', 'borderradius', ...]\n  function setClasses(classes) {\n    var className = docElement.className;\n    var classPrefix = Modernizr._config.classPrefix || '';\n\n    if (isSVG) {\n      className = className.baseVal;\n    }\n\n    // Change `no-js` to `js` (independently of the `enableClasses` option)\n    // Handle classPrefix on this too\n    if (Modernizr._config.enableJSClass) {\n      var reJS = new RegExp('(^|\\\\s)' + classPrefix + 'no-js(\\\\s|$)');\n      className = className.replace(reJS, '$1' + classPrefix + 'js$2');\n    }\n\n    if (Modernizr._config.enableClasses) {\n      // Add the new classes\n      if (classes.length > 0) {\n        className += ' ' + classPrefix + classes.join(' ' + classPrefix);\n      }\n      if (isSVG) {\n        docElement.className.baseVal = className;\n      } else {\n        docElement.className = className;\n      }\n    }\n  }\n\n  ;\n\n  /**\n   * hasOwnProp is a shim for hasOwnProperty that is needed for Safari 2.0 support\n   *\n   * @author kangax\n   * @access private\n   * @function hasOwnProp\n   * @param {object} object - The object to check for a property\n   * @param {string} property - The property to check for\n   * @returns {boolean}\n   */\n\n  // hasOwnProperty shim by kangax needed for Safari 2.0 support\n  var hasOwnProp;\n\n  (function() {\n    var _hasOwnProperty = ({}).hasOwnProperty;\n    /* istanbul ignore else */\n    /* we have no way of testing IE 5.5 or safari 2,\n     * so just assume the else gets hit */\n    if (!is(_hasOwnProperty, 'undefined') && !is(_hasOwnProperty.call, 'undefined')) {\n      hasOwnProp = function(object, property) {\n        return _hasOwnProperty.call(object, property);\n      };\n    }\n    else {\n      hasOwnProp = function(object, property) { /* yes, this can give false positives/negatives, but most of the time we don't care about those */\n        return ((property in object) && is(object.constructor.prototype[property], 'undefined'));\n      };\n    }\n  })();\n\n  \n\n\n  // _l tracks listeners for async tests, as well as tests that execute after the initial run\n  ModernizrProto._l = {};\n\n  /**\n   * Modernizr.on is a way to listen for the completion of async tests. Being\n   * asynchronous, they may not finish before your scripts run. As a result you\n   * will get a possibly false negative `undefined` value.\n   *\n   * @memberOf Modernizr\n   * @name Modernizr.on\n   * @access public\n   * @function on\n   * @param {string} feature - String name of the feature detect\n   * @param {Function} cb - Callback function returning a Boolean - true if feature is supported, false if not\n   * @returns {void}\n   * @example\n   *\n   * ```js\n   * Modernizr.on('flash', function( result ) {\n   *   if (result) {\n   *    // the browser has flash\n   *   } else {\n   *     // the browser does not have flash\n   *   }\n   * });\n   * ```\n   */\n  ModernizrProto.on = function(feature, cb) {\n    // Create the list of listeners if it doesn't exist\n    if (!this._l[feature]) {\n      this._l[feature] = [];\n    }\n\n    // Push this test on to the listener list\n    this._l[feature].push(cb);\n\n    // If it's already been resolved, trigger it on next tick\n    if (Modernizr.hasOwnProperty(feature)) {\n      // Next Tick\n      setTimeout(function() {\n        Modernizr._trigger(feature, Modernizr[feature]);\n      }, 0);\n    }\n  };\n\n  /**\n   * _trigger is the private function used to signal test completion and run any\n   * callbacks registered through [Modernizr.on](#modernizr-on)\n   *\n   * @memberOf Modernizr\n   * @name Modernizr._trigger\n   * @access private\n   * @function _trigger\n   * @param {string} feature - string name of the feature detect\n   * @param {Function|boolean} [res] - A feature detection function, or the boolean =\n   * result of a feature detection function\n   * @returns {void}\n   */\n  ModernizrProto._trigger = function(feature, res) {\n    if (!this._l[feature]) {\n      return;\n    }\n\n    var cbs = this._l[feature];\n\n    // Force async\n    setTimeout(function() {\n      var i, cb;\n      for (i = 0; i < cbs.length; i++) {\n        cb = cbs[i];\n        cb(res);\n      }\n    }, 0);\n\n    // Don't trigger these again\n    delete this._l[feature];\n  };\n\n  /**\n   * addTest allows you to define your own feature detects that are not currently\n   * included in Modernizr (under the covers it's the exact same code Modernizr\n   * uses for its own [feature detections](https://github.com/Modernizr/Modernizr/tree/master/feature-detects)).\n   * Just like the official detects, the result\n   * will be added onto the Modernizr object, as well as an appropriate className set on\n   * the html element when configured to do so\n   *\n   * @memberOf Modernizr\n   * @name Modernizr.addTest\n   * @optionName Modernizr.addTest()\n   * @optionProp addTest\n   * @access public\n   * @function addTest\n   * @param {string|object} feature - The string name of the feature detect, or an\n   * object of feature detect names and test\n   * @param {Function|boolean} test - Function returning true if feature is supported,\n   * false if not. Otherwise a boolean representing the results of a feature detection\n   * @returns {object} the Modernizr object to allow chaining\n   * @example\n   *\n   * The most common way of creating your own feature detects is by calling\n   * `Modernizr.addTest` with a string (preferably just lowercase, without any\n   * punctuation), and a function you want executed that will return a boolean result\n   *\n   * ```js\n   * Modernizr.addTest('itsTuesday', function() {\n   *  var d = new Date();\n   *  return d.getDay() === 2;\n   * });\n   * ```\n   *\n   * When the above is run, it will set Modernizr.itstuesday to `true` when it is tuesday,\n   * and to `false` every other day of the week. One thing to notice is that the names of\n   * feature detect functions are always lowercased when added to the Modernizr object. That\n   * means that `Modernizr.itsTuesday` will not exist, but `Modernizr.itstuesday` will.\n   *\n   *\n   *  Since we only look at the returned value from any feature detection function,\n   *  you do not need to actually use a function. For simple detections, just passing\n   *  in a statement that will return a boolean value works just fine.\n   *\n   * ```js\n   * Modernizr.addTest('hasjquery', 'jQuery' in window);\n   * ```\n   *\n   * Just like before, when the above runs `Modernizr.hasjquery` will be true if\n   * jQuery has been included on the page. Not using a function saves a small amount\n   * of overhead for the browser, as well as making your code much more readable.\n   *\n   * Finally, you also have the ability to pass in an object of feature names and\n   * their tests. This is handy if you want to add multiple detections in one go.\n   * The keys should always be a string, and the value can be either a boolean or\n   * function that returns a boolean.\n   *\n   * ```js\n   * var detects = {\n   *  'hasjquery': 'jQuery' in window,\n   *  'itstuesday': function() {\n   *    var d = new Date();\n   *    return d.getDay() === 2;\n   *  }\n   * }\n   *\n   * Modernizr.addTest(detects);\n   * ```\n   *\n   * There is really no difference between the first methods and this one, it is\n   * just a convenience to let you write more readable code.\n   */\n  function addTest(feature, test) {\n\n    if (typeof feature === 'object') {\n      for (var key in feature) {\n        if (hasOwnProp(feature, key)) {\n          addTest(key, feature[ key ]);\n        }\n      }\n    } else {\n\n      feature = feature.toLowerCase();\n      var featureNameSplit = feature.split('.');\n      var last = Modernizr[featureNameSplit[0]];\n\n      // Again, we don't check for parent test existence. Get that right, though.\n      if (featureNameSplit.length === 2) {\n        last = last[featureNameSplit[1]];\n      }\n\n      if (typeof last !== 'undefined') {\n        // we're going to quit if you're trying to overwrite an existing test\n        // if we were to allow it, we'd do this:\n        //   var re = new RegExp(\"\\\\b(no-)?\" + feature + \"\\\\b\");\n        //   docElement.className = docElement.className.replace( re, '' );\n        // but, no rly, stuff 'em.\n        return Modernizr;\n      }\n\n      test = typeof test === 'function' ? test() : test;\n\n      // Set the value (this is the magic, right here).\n      if (featureNameSplit.length === 1) {\n        Modernizr[featureNameSplit[0]] = test;\n      } else {\n        // cast to a Boolean, if not one already\n        if (Modernizr[featureNameSplit[0]] && !(Modernizr[featureNameSplit[0]] instanceof Boolean)) {\n          Modernizr[featureNameSplit[0]] = new Boolean(Modernizr[featureNameSplit[0]]);\n        }\n\n        Modernizr[featureNameSplit[0]][featureNameSplit[1]] = test;\n      }\n\n      // Set a single class (either `feature` or `no-feature`)\n      setClasses([(!!test && test !== false ? '' : 'no-') + featureNameSplit.join('-')]);\n\n      // Trigger the event\n      Modernizr._trigger(feature, test);\n    }\n\n    return Modernizr; // allow chaining.\n  }\n\n  // After all the tests are run, add self to the Modernizr prototype\n  Modernizr._q.push(function() {\n    ModernizrProto.addTest = addTest;\n  });\n\n  \n\n\n  /**\n   * @optionName html5printshiv\n   * @optionProp html5printshiv\n   */\n\n  // Take the html5 variable out of the html5shiv scope so we can return it.\n  var html5;\n  if (!isSVG) {\n    /**\n     * @preserve HTML5 Shiv 3.7.3 | @afarkas @jdalton @jon_neal @rem | MIT/GPL2 Licensed\n     */\n    ;(function(window, document) {\n      /*jshint evil:true */\n      /** version */\n      var version = '3.7.3';\n\n      /** Preset options */\n      var options = window.html5 || {};\n\n      /** Used to skip problem elements */\n      var reSkip = /^<|^(?:button|map|select|textarea|object|iframe|option|optgroup)$/i;\n\n      /** Not all elements can be cloned in IE **/\n      var saveClones = /^(?:a|b|code|div|fieldset|h1|h2|h3|h4|h5|h6|i|label|li|ol|p|q|span|strong|style|table|tbody|td|th|tr|ul)$/i;\n\n      /** Detect whether the browser supports default html5 styles */\n      var supportsHtml5Styles;\n\n      /** Name of the expando, to work with multiple documents or to re-shiv one document */\n      var expando = '_html5shiv';\n\n      /** The id for the the documents expando */\n      var expanID = 0;\n\n      /** Cached data for each document */\n      var expandoData = {};\n\n      /** Detect whether the browser supports unknown elements */\n      var supportsUnknownElements;\n\n      (function() {\n        try {\n          var a = document.createElement('a');\n          a.innerHTML = '<xyz></xyz>';\n          //if the hidden property is implemented we can assume, that the browser supports basic HTML5 Styles\n          supportsHtml5Styles = ('hidden' in a);\n\n          supportsUnknownElements = a.childNodes.length == 1 || (function() {\n            // assign a false positive if unable to shiv\n            (document.createElement)('a');\n            var frag = document.createDocumentFragment();\n            return (\n              typeof frag.cloneNode == 'undefined' ||\n              typeof frag.createDocumentFragment == 'undefined' ||\n              typeof frag.createElement == 'undefined'\n            );\n          }());\n        } catch(e) {\n          // assign a false positive if detection fails => unable to shiv\n          supportsHtml5Styles = true;\n          supportsUnknownElements = true;\n        }\n\n      }());\n\n      /*--------------------------------------------------------------------------*/\n\n      /**\n       * Creates a style sheet with the given CSS text and adds it to the document.\n       * @private\n       * @param {Document} ownerDocument The document.\n       * @param {String} cssText The CSS text.\n       * @returns {StyleSheet} The style element.\n       */\n      function addStyleSheet(ownerDocument, cssText) {\n        var p = ownerDocument.createElement('p'),\n          parent = ownerDocument.getElementsByTagName('head')[0] || ownerDocument.documentElement;\n\n        p.innerHTML = 'x<style>' + cssText + '</style>';\n        return parent.insertBefore(p.lastChild, parent.firstChild);\n      }\n\n      /**\n       * Returns the value of `html5.elements` as an array.\n       * @private\n       * @returns {Array} An array of shived element node names.\n       */\n      function getElements() {\n        var elements = html5.elements;\n        return typeof elements == 'string' ? elements.split(' ') : elements;\n      }\n\n      /**\n       * Extends the built-in list of html5 elements\n       * @memberOf html5\n       * @param {String|Array} newElements whitespace separated list or array of new element names to shiv\n       * @param {Document} ownerDocument The context document.\n       */\n      function addElements(newElements, ownerDocument) {\n        var elements = html5.elements;\n        if(typeof elements != 'string'){\n          elements = elements.join(' ');\n        }\n        if(typeof newElements != 'string'){\n          newElements = newElements.join(' ');\n        }\n        html5.elements = elements +' '+ newElements;\n        shivDocument(ownerDocument);\n      }\n\n      /**\n       * Returns the data associated to the given document\n       * @private\n       * @param {Document} ownerDocument The document.\n       * @returns {Object} An object of data.\n       */\n      function getExpandoData(ownerDocument) {\n        var data = expandoData[ownerDocument[expando]];\n        if (!data) {\n          data = {};\n          expanID++;\n          ownerDocument[expando] = expanID;\n          expandoData[expanID] = data;\n        }\n        return data;\n      }\n\n      /**\n       * returns a shived element for the given nodeName and document\n       * @memberOf html5\n       * @param {String} nodeName name of the element\n       * @param {Document} ownerDocument The context document.\n       * @returns {Object} The shived element.\n       */\n      function createElement(nodeName, ownerDocument, data){\n        if (!ownerDocument) {\n          ownerDocument = document;\n        }\n        if(supportsUnknownElements){\n          return ownerDocument.createElement(nodeName);\n        }\n        if (!data) {\n          data = getExpandoData(ownerDocument);\n        }\n        var node;\n\n        if (data.cache[nodeName]) {\n          node = data.cache[nodeName].cloneNode();\n        } else if (saveClones.test(nodeName)) {\n          node = (data.cache[nodeName] = data.createElem(nodeName)).cloneNode();\n        } else {\n          node = data.createElem(nodeName);\n        }\n\n        // Avoid adding some elements to fragments in IE < 9 because\n        // * Attributes like `name` or `type` cannot be set/changed once an element\n        //   is inserted into a document/fragment\n        // * Link elements with `src` attributes that are inaccessible, as with\n        //   a 403 response, will cause the tab/window to crash\n        // * Script elements appended to fragments will execute when their `src`\n        //   or `text` property is set\n        return node.canHaveChildren && !reSkip.test(nodeName) && !node.tagUrn ? data.frag.appendChild(node) : node;\n      }\n\n      /**\n       * returns a shived DocumentFragment for the given document\n       * @memberOf html5\n       * @param {Document} ownerDocument The context document.\n       * @returns {Object} The shived DocumentFragment.\n       */\n      function createDocumentFragment(ownerDocument, data){\n        if (!ownerDocument) {\n          ownerDocument = document;\n        }\n        if(supportsUnknownElements){\n          return ownerDocument.createDocumentFragment();\n        }\n        data = data || getExpandoData(ownerDocument);\n        var clone = data.frag.cloneNode(),\n          i = 0,\n          elems = getElements(),\n          l = elems.length;\n        for(;i<l;i++){\n          clone.createElement(elems[i]);\n        }\n        return clone;\n      }\n\n      /**\n       * Shivs the `createElement` and `createDocumentFragment` methods of the document.\n       * @private\n       * @param {Document|DocumentFragment} ownerDocument The document.\n       * @param {Object} data of the document.\n       */\n      function shivMethods(ownerDocument, data) {\n        if (!data.cache) {\n          data.cache = {};\n          data.createElem = ownerDocument.createElement;\n          data.createFrag = ownerDocument.createDocumentFragment;\n          data.frag = data.createFrag();\n        }\n\n\n        ownerDocument.createElement = function(nodeName) {\n          //abort shiv\n          if (!html5.shivMethods) {\n            return data.createElem(nodeName);\n          }\n          return createElement(nodeName, ownerDocument, data);\n        };\n\n        ownerDocument.createDocumentFragment = Function('h,f', 'return function(){' +\n          'var n=f.cloneNode(),c=n.createElement;' +\n          'h.shivMethods&&(' +\n          // unroll the `createElement` calls\n          getElements().join().replace(/[\\w\\-:]+/g, function(nodeName) {\n            data.createElem(nodeName);\n            data.frag.createElement(nodeName);\n            return 'c(\"' + nodeName + '\")';\n          }) +\n          ');return n}'\n        )(html5, data.frag);\n      }\n\n      /*--------------------------------------------------------------------------*/\n\n      /**\n       * Shivs the given document.\n       * @memberOf html5\n       * @param {Document} ownerDocument The document to shiv.\n       * @returns {Document} The shived document.\n       */\n      function shivDocument(ownerDocument) {\n        if (!ownerDocument) {\n          ownerDocument = document;\n        }\n        var data = getExpandoData(ownerDocument);\n\n        if (html5.shivCSS && !supportsHtml5Styles && !data.hasCSS) {\n          data.hasCSS = !!addStyleSheet(ownerDocument,\n            // corrects block display not defined in IE6/7/8/9\n            'article,aside,dialog,figcaption,figure,footer,header,hgroup,main,nav,section{display:block}' +\n            // adds styling not present in IE6/7/8/9\n            'mark{background:#FF0;color:#000}' +\n            // hides non-rendered elements\n            'template{display:none}'\n          );\n        }\n        if (!supportsUnknownElements) {\n          shivMethods(ownerDocument, data);\n        }\n        return ownerDocument;\n      }\n\n      /*--------------------------------------------------------------------------*/\n\n      /**\n       * The `html5` object is exposed so that more elements can be shived and\n       * existing shiving can be detected on iframes.\n       * @type Object\n       * @example\n       *\n       * // options can be changed before the script is included\n       * html5 = { 'elements': 'mark section', 'shivCSS': false, 'shivMethods': false };\n       */\n      var html5 = {\n\n        /**\n         * An array or space separated string of node names of the elements to shiv.\n         * @memberOf html5\n         * @type Array|String\n         */\n        'elements': options.elements || 'abbr article aside audio bdi canvas data datalist details dialog figcaption figure footer header hgroup main mark meter nav output picture progress section summary template time video',\n\n        /**\n         * current version of html5shiv\n         */\n        'version': version,\n\n        /**\n         * A flag to indicate that the HTML5 style sheet should be inserted.\n         * @memberOf html5\n         * @type Boolean\n         */\n        'shivCSS': (options.shivCSS !== false),\n\n        /**\n         * Is equal to true if a browser supports creating unknown/HTML5 elements\n         * @memberOf html5\n         * @type boolean\n         */\n        'supportsUnknownElements': supportsUnknownElements,\n\n        /**\n         * A flag to indicate that the document's `createElement` and `createDocumentFragment`\n         * methods should be overwritten.\n         * @memberOf html5\n         * @type Boolean\n         */\n        'shivMethods': (options.shivMethods !== false),\n\n        /**\n         * A string to describe the type of `html5` object (\"default\" or \"default print\").\n         * @memberOf html5\n         * @type String\n         */\n        'type': 'default',\n\n        // shivs the document according to the specified `html5` object options\n        'shivDocument': shivDocument,\n\n        //creates a shived element\n        createElement: createElement,\n\n        //creates a shived documentFragment\n        createDocumentFragment: createDocumentFragment,\n\n        //extends list of elements\n        addElements: addElements\n      };\n\n      /*--------------------------------------------------------------------------*/\n\n      // expose html5\n      window.html5 = html5;\n\n      // shiv the document\n      shivDocument(document);\n\n      /*------------------------------- Print Shiv -------------------------------*/\n\n      /** Used to filter media types */\n      var reMedia = /^$|\\b(?:all|print)\\b/;\n\n      /** Used to namespace printable elements */\n      var shivNamespace = 'html5shiv';\n\n      /** Detect whether the browser supports shivable style sheets */\n      var supportsShivableSheets = !supportsUnknownElements && (function() {\n        // assign a false negative if unable to shiv\n        var docEl = document.documentElement;\n        return !(\n          typeof document.namespaces == 'undefined' ||\n          typeof document.parentWindow == 'undefined' ||\n          typeof docEl.applyElement == 'undefined' ||\n          typeof docEl.removeNode == 'undefined' ||\n          typeof window.attachEvent == 'undefined'\n        );\n      }());\n\n      /*--------------------------------------------------------------------------*/\n\n      /**\n       * Wraps all HTML5 elements in the given document with printable elements.\n       * (eg. the \"header\" element is wrapped with the \"html5shiv:header\" element)\n       * @private\n       * @param {Document} ownerDocument The document.\n       * @returns {Array} An array wrappers added.\n       */\n      function addWrappers(ownerDocument) {\n        var node,\n          nodes = ownerDocument.getElementsByTagName('*'),\n          index = nodes.length,\n          reElements = RegExp('^(?:' + getElements().join('|') + ')$', 'i'),\n          result = [];\n\n        while (index--) {\n          node = nodes[index];\n          if (reElements.test(node.nodeName)) {\n            result.push(node.applyElement(createWrapper(node)));\n          }\n        }\n        return result;\n      }\n\n      /**\n       * Creates a printable wrapper for the given element.\n       * @private\n       * @param {Element} element The element.\n       * @returns {Element} The wrapper.\n       */\n      function createWrapper(element) {\n        var node,\n          nodes = element.attributes,\n          index = nodes.length,\n          wrapper = element.ownerDocument.createElement(shivNamespace + ':' + element.nodeName);\n\n        // copy element attributes to the wrapper\n        while (index--) {\n          node = nodes[index];\n          node.specified && wrapper.setAttribute(node.nodeName, node.nodeValue);\n        }\n        // copy element styles to the wrapper\n        wrapper.style.cssText = element.style.cssText;\n        return wrapper;\n      }\n\n      /**\n       * Shivs the given CSS text.\n       * (eg. header{} becomes html5shiv\\:header{})\n       * @private\n       * @param {String} cssText The CSS text to shiv.\n       * @returns {String} The shived CSS text.\n       */\n      function shivCssText(cssText) {\n        var pair,\n          parts = cssText.split('{'),\n          index = parts.length,\n          reElements = RegExp('(^|[\\\\s,>+~])(' + getElements().join('|') + ')(?=[[\\\\s,>+~#.:]|$)', 'gi'),\n          replacement = '$1' + shivNamespace + '\\\\:$2';\n\n        while (index--) {\n          pair = parts[index] = parts[index].split('}');\n          pair[pair.length - 1] = pair[pair.length - 1].replace(reElements, replacement);\n          parts[index] = pair.join('}');\n        }\n        return parts.join('{');\n      }\n\n      /**\n       * Removes the given wrappers, leaving the original elements.\n       * @private\n       * @params {Array} wrappers An array of printable wrappers.\n       */\n      function removeWrappers(wrappers) {\n        var index = wrappers.length;\n        while (index--) {\n          wrappers[index].removeNode();\n        }\n      }\n\n      /*--------------------------------------------------------------------------*/\n\n      /**\n       * Shivs the given document for print.\n       * @memberOf html5\n       * @param {Document} ownerDocument The document to shiv.\n       * @returns {Document} The shived document.\n       */\n      function shivPrint(ownerDocument) {\n        var shivedSheet,\n          wrappers,\n          data = getExpandoData(ownerDocument),\n          namespaces = ownerDocument.namespaces,\n          ownerWindow = ownerDocument.parentWindow;\n\n        if (!supportsShivableSheets || ownerDocument.printShived) {\n          return ownerDocument;\n        }\n        if (typeof namespaces[shivNamespace] == 'undefined') {\n          namespaces.add(shivNamespace);\n        }\n\n        function removeSheet() {\n          clearTimeout(data._removeSheetTimer);\n          if (shivedSheet) {\n            shivedSheet.removeNode(true);\n          }\n          shivedSheet= null;\n        }\n\n        ownerWindow.attachEvent('onbeforeprint', function() {\n\n          removeSheet();\n\n          var imports,\n            length,\n            sheet,\n            collection = ownerDocument.styleSheets,\n            cssText = [],\n            index = collection.length,\n            sheets = Array(index);\n\n          // convert styleSheets collection to an array\n          while (index--) {\n            sheets[index] = collection[index];\n          }\n          // concat all style sheet CSS text\n          while ((sheet = sheets.pop())) {\n            // IE does not enforce a same origin policy for external style sheets...\n            // but has trouble with some dynamically created stylesheets\n            if (!sheet.disabled && reMedia.test(sheet.media)) {\n\n              try {\n                imports = sheet.imports;\n                length = imports.length;\n              } catch(er){\n                length = 0;\n              }\n\n              for (index = 0; index < length; index++) {\n                sheets.push(imports[index]);\n              }\n\n              try {\n                cssText.push(sheet.cssText);\n              } catch(er){}\n            }\n          }\n\n          // wrap all HTML5 elements with printable elements and add the shived style sheet\n          cssText = shivCssText(cssText.reverse().join(''));\n          wrappers = addWrappers(ownerDocument);\n          shivedSheet = addStyleSheet(ownerDocument, cssText);\n\n        });\n\n        ownerWindow.attachEvent('onafterprint', function() {\n          // remove wrappers, leaving the original elements, and remove the shived style sheet\n          removeWrappers(wrappers);\n          clearTimeout(data._removeSheetTimer);\n          data._removeSheetTimer = setTimeout(removeSheet, 500);\n        });\n\n        ownerDocument.printShived = true;\n        return ownerDocument;\n      }\n\n      /*--------------------------------------------------------------------------*/\n\n      // expose API\n      html5.type += ' print';\n      html5.shivPrint = shivPrint;\n\n      // shiv for print\n      shivPrint(document);\n\n      if(typeof module == 'object' && module.exports){\n        module.exports = html5;\n      }\n\n    }(typeof window !== \"undefined\" ? window : this, document));\n  }\n\n  ;\n\n  /**\n   * contains checks to see if a string contains another string\n   *\n   * @access private\n   * @function contains\n   * @param {string} str - The string we want to check for substrings\n   * @param {string} substr - The substring we want to search the first string for\n   * @returns {boolean} true if and only if the first string 'str' contains the second string 'substr'\n   */\n  function contains(str, substr) {\n    return !!~('' + str).indexOf(substr);\n  }\n\n  ;\n\n  /**\n   * createElement is a convenience wrapper around document.createElement. Since we\n   * use createElement all over the place, this allows for (slightly) smaller code\n   * as well as abstracting away issues with creating elements in contexts other than\n   * HTML documents (e.g. SVG documents).\n   *\n   * @access private\n   * @function createElement\n   * @returns {HTMLElement|SVGElement} An HTML or SVG element\n   */\n  function createElement() {\n    if (typeof document.createElement !== 'function') {\n      // This is the case in IE7, where the type of createElement is \"object\".\n      // For this reason, we cannot call apply() as Object is not a Function.\n      return document.createElement(arguments[0]);\n    } else if (isSVG) {\n      return document.createElementNS.call(document, 'http://www.w3.org/2000/svg', arguments[0]);\n    } else {\n      return document.createElement.apply(document, arguments);\n    }\n  }\n\n  ;\n\n  /**\n   * Create our \"modernizr\" element that we do most feature tests on.\n   *\n   * @access private\n   */\n  var modElem = {\n    elem: createElement('modernizr')\n  };\n\n  // Clean up this element\n  Modernizr._q.push(function() {\n    delete modElem.elem;\n  });\n\n  \n\n  var mStyle = {\n    style: modElem.elem.style\n  };\n\n  // kill ref for gc, must happen before mod.elem is removed, so we unshift on to\n  // the front of the queue.\n  Modernizr._q.unshift(function() {\n    delete mStyle.style;\n  });\n\n  \n\n  /**\n   * getBody returns the body of a document, or an element that can stand in for\n   * the body if a real body does not exist\n   *\n   * @access private\n   * @function getBody\n   * @returns {HTMLElement|SVGElement} Returns the real body of a document, or an\n   * artificially created element that stands in for the body\n   */\n  function getBody() {\n    // After page load injecting a fake body doesn't work so check if body exists\n    var body = document.body;\n\n    if (!body) {\n      // Can't use the real body create a fake one.\n      body = createElement(isSVG ? 'svg' : 'body');\n      body.fake = true;\n    }\n\n    return body;\n  }\n\n  ;\n\n  /**\n   * injectElementWithStyles injects an element with style element and some CSS rules\n   *\n   * @access private\n   * @function injectElementWithStyles\n   * @param {string} rule - String representing a css rule\n   * @param {Function} callback - A function that is used to test the injected element\n   * @param {number} [nodes] - An integer representing the number of additional nodes you want injected\n   * @param {string[]} [testnames] - An array of strings that are used as ids for the additional nodes\n   * @returns {boolean} the result of the specified callback test\n   */\n  function injectElementWithStyles(rule, callback, nodes, testnames) {\n    var mod = 'modernizr';\n    var style;\n    var ret;\n    var node;\n    var docOverflow;\n    var div = createElement('div');\n    var body = getBody();\n\n    if (parseInt(nodes, 10)) {\n      // In order not to give false positives we create a node for each test\n      // This also allows the method to scale for unspecified uses\n      while (nodes--) {\n        node = createElement('div');\n        node.id = testnames ? testnames[nodes] : mod + (nodes + 1);\n        div.appendChild(node);\n      }\n    }\n\n    style = createElement('style');\n    style.type = 'text/css';\n    style.id = 's' + mod;\n\n    // IE6 will false positive on some tests due to the style element inside the test div somehow interfering offsetHeight, so insert it into body or fakebody.\n    // Opera will act all quirky when injecting elements in documentElement when page is served as xml, needs fakebody too. #270\n    (!body.fake ? div : body).appendChild(style);\n    body.appendChild(div);\n\n    if (style.styleSheet) {\n      style.styleSheet.cssText = rule;\n    } else {\n      style.appendChild(document.createTextNode(rule));\n    }\n    div.id = mod;\n\n    if (body.fake) {\n      //avoid crashing IE8, if background image is used\n      body.style.background = '';\n      //Safari 5.13/5.1.4 OSX stops loading if ::-webkit-scrollbar is used and scrollbars are visible\n      body.style.overflow = 'hidden';\n      docOverflow = docElement.style.overflow;\n      docElement.style.overflow = 'hidden';\n      docElement.appendChild(body);\n    }\n\n    ret = callback(div, rule);\n    // If this is done after page load we don't want to remove the body so check if body exists\n    if (body.fake && body.parentNode) {\n      body.parentNode.removeChild(body);\n      docElement.style.overflow = docOverflow;\n      // Trigger layout so kinetic scrolling isn't disabled in iOS6+\n      // eslint-disable-next-line\n      docElement.offsetHeight;\n    } else {\n      div.parentNode.removeChild(div);\n    }\n\n    return !!ret;\n  }\n\n  ;\n\n  /**\n   * domToCSS takes a camelCase string and converts it to hyphen-case\n   * e.g. boxSizing -> box-sizing\n   *\n   * @access private\n   * @function domToCSS\n   * @param {string} name - String name of camelCase prop we want to convert\n   * @returns {string} The hyphen-case version of the supplied name\n   */\n  function domToCSS(name) {\n    return name.replace(/([A-Z])/g, function(str, m1) {\n      return '-' + m1.toLowerCase();\n    }).replace(/^ms-/, '-ms-');\n  }\n\n  ;\n\n\n  /**\n   * wrapper around getComputedStyle, to fix issues with Firefox returning null when\n   * called inside of a hidden iframe\n   *\n   * @access private\n   * @function computedStyle\n   * @param {HTMLElement|SVGElement} elem - The element we want to find the computed styles of\n   * @param {string|null} [pseudo] - An optional pseudo element selector (e.g. :before), of null if none\n   * @param {string} prop - A CSS property\n   * @returns {CSSStyleDeclaration} the value of the specified CSS property\n   */\n  function computedStyle(elem, pseudo, prop) {\n    var result;\n\n    if ('getComputedStyle' in window) {\n      result = getComputedStyle.call(window, elem, pseudo);\n      var console = window.console;\n\n      if (result !== null) {\n        if (prop) {\n          result = result.getPropertyValue(prop);\n        }\n      } else {\n        if (console) {\n          var method = console.error ? 'error' : 'log';\n          console[method].call(console, 'getComputedStyle returning null, its possible modernizr test results are inaccurate');\n        }\n      }\n    } else {\n      result = !pseudo && elem.currentStyle && elem.currentStyle[prop];\n    }\n\n    return result;\n  }\n\n  ;\n\n  /**\n   * nativeTestProps allows for us to use native feature detection functionality if available.\n   * some prefixed form, or false, in the case of an unsupported rule\n   *\n   * @access private\n   * @function nativeTestProps\n   * @param {Array} props - An array of property names\n   * @param {string} value - A string representing the value we want to check via @supports\n   * @returns {boolean|undefined} A boolean when @supports exists, undefined otherwise\n   */\n  // Accepts a list of property names and a single value\n  // Returns `undefined` if native detection not available\n  function nativeTestProps(props, value) {\n    var i = props.length;\n    // Start with the JS API: https://www.w3.org/TR/css3-conditional/#the-css-interface\n    if ('CSS' in window && 'supports' in window.CSS) {\n      // Try every prefixed variant of the property\n      while (i--) {\n        if (window.CSS.supports(domToCSS(props[i]), value)) {\n          return true;\n        }\n      }\n      return false;\n    }\n    // Otherwise fall back to at-rule (for Opera 12.x)\n    else if ('CSSSupportsRule' in window) {\n      // Build a condition string for every prefixed variant\n      var conditionText = [];\n      while (i--) {\n        conditionText.push('(' + domToCSS(props[i]) + ':' + value + ')');\n      }\n      conditionText = conditionText.join(' or ');\n      return injectElementWithStyles('@supports (' + conditionText + ') { #modernizr { position: absolute; } }', function(node) {\n        return computedStyle(node, null, 'position') === 'absolute';\n      });\n    }\n    return undefined;\n  }\n  ;\n\n  /**\n   * cssToDOM takes a hyphen-case string and converts it to camelCase\n   * e.g. box-sizing -> boxSizing\n   *\n   * @access private\n   * @function cssToDOM\n   * @param {string} name - String name of hyphen-case prop we want to convert\n   * @returns {string} The camelCase version of the supplied name\n   */\n  function cssToDOM(name) {\n    return name.replace(/([a-z])-([a-z])/g, function(str, m1, m2) {\n      return m1 + m2.toUpperCase();\n    }).replace(/^-/, '');\n  }\n\n  ;\n\n  // testProps is a generic CSS / DOM property test.\n\n  // In testing support for a given CSS property, it's legit to test:\n  //    `elem.style[styleName] !== undefined`\n  // If the property is supported it will return an empty string,\n  // if unsupported it will return undefined.\n\n  // We'll take advantage of this quick test and skip setting a style\n  // on our modernizr element, but instead just testing undefined vs\n  // empty string.\n\n  // Property names can be provided in either camelCase or hyphen-case.\n\n  function testProps(props, prefixed, value, skipValueTest) {\n    skipValueTest = is(skipValueTest, 'undefined') ? false : skipValueTest;\n\n    // Try native detect first\n    if (!is(value, 'undefined')) {\n      var result = nativeTestProps(props, value);\n      if (!is(result, 'undefined')) {\n        return result;\n      }\n    }\n\n    // Otherwise do it properly\n    var afterInit, i, propsLength, prop, before;\n\n    // If we don't have a style element, that means we're running async or after\n    // the core tests, so we'll need to create our own elements to use.\n\n    // Inside of an SVG element, in certain browsers, the `style` element is only\n    // defined for valid tags. Therefore, if `modernizr` does not have one, we\n    // fall back to a less used element and hope for the best.\n    // For strict XHTML browsers the hardly used samp element is used.\n    var elems = ['modernizr', 'tspan', 'samp'];\n    while (!mStyle.style && elems.length) {\n      afterInit = true;\n      mStyle.modElem = createElement(elems.shift());\n      mStyle.style = mStyle.modElem.style;\n    }\n\n    // Delete the objects if we created them.\n    function cleanElems() {\n      if (afterInit) {\n        delete mStyle.style;\n        delete mStyle.modElem;\n      }\n    }\n\n    propsLength = props.length;\n    for (i = 0; i < propsLength; i++) {\n      prop = props[i];\n      before = mStyle.style[prop];\n\n      if (contains(prop, '-')) {\n        prop = cssToDOM(prop);\n      }\n\n      if (mStyle.style[prop] !== undefined) {\n\n        // If value to test has been passed in, do a set-and-check test.\n        // 0 (integer) is a valid property value, so check that `value` isn't\n        // undefined, rather than just checking it's truthy.\n        if (!skipValueTest && !is(value, 'undefined')) {\n\n          // Needs a try catch block because of old IE. This is slow, but will\n          // be avoided in most cases because `skipValueTest` will be used.\n          try {\n            mStyle.style[prop] = value;\n          } catch (e) {}\n\n          // If the property value has changed, we assume the value used is\n          // supported. If `value` is empty string, it'll fail here (because\n          // it hasn't changed), which matches how browsers have implemented\n          // CSS.supports()\n          if (mStyle.style[prop] !== before) {\n            cleanElems();\n            return prefixed === 'pfx' ? prop : true;\n          }\n        }\n        // Otherwise just return true, or the property name if this is a\n        // `prefixed()` call\n        else {\n          cleanElems();\n          return prefixed === 'pfx' ? prop : true;\n        }\n      }\n    }\n    cleanElems();\n    return false;\n  }\n\n  ;\n\n  /**\n   * testProp() investigates whether a given style property is recognized\n   * Property names can be provided in either camelCase or hyphen-case.\n   *\n   * @memberOf Modernizr\n   * @name Modernizr.testProp\n   * @access public\n   * @optionName Modernizr.testProp()\n   * @optionProp testProp\n   * @function testProp\n   * @param {string} prop - Name of the CSS property to check\n   * @param {string} [value] - Name of the CSS value to check\n   * @param {boolean} [useValue] - Whether or not to check the value if @supports isn't supported\n   * @returns {boolean} an empty string if the property is supported, undefined if its unsupported\n   * @example\n   *\n   * Just like [testAllProps](#modernizr-testallprops), only it does not check any vendor prefixed\n   * version of the string.\n   *\n   * Note that the property name must be provided in camelCase (e.g. boxSizing not box-sizing)\n   *\n   * ```js\n   * Modernizr.testProp('pointerEvents')  // true\n   * ```\n   *\n   * You can also provide a value as an optional second argument to check if a\n   * specific value is supported\n   *\n   * ```js\n   * Modernizr.testProp('pointerEvents', 'none') // true\n   * Modernizr.testProp('pointerEvents', 'penguin') // false\n   * ```\n   */\n  var testProp = ModernizrProto.testProp = function(prop, value, useValue) {\n    return testProps([prop], undefined, value, useValue);\n  };\n\n  \n\n  // Run each test\n  testRunner();\n\n  // Remove the \"no-js\" class if it exists\n  setClasses(classes);\n\n  delete ModernizrProto.addTest;\n  delete ModernizrProto.addAsyncTest;\n\n  // Run the things that are supposed to run after the tests\n  for (var i = 0; i < Modernizr._q.length; i++) {\n    Modernizr._q[i]();\n  }\n\n  // Leak Modernizr namespace\n  scriptGlobalObject.Modernizr = Modernizr;\n\n\n;\n\n})(window, window, document);\n"],"names":["scriptGlobalObject","window","document","undefined","tests","ModernizrProto","_version","_config","classPrefix","enableClasses","enableJSClass","usePrefixes","_q","on","test","cb","self","this","setTimeout","addTest","name","fn","options","push","addAsyncTest","Modernizr","prototype","classes","is","obj","type","hasOwnProp","_hasOwnProperty","docElement","documentElement","isSVG","nodeName","toLowerCase","setClasses","reJS","className","baseVal","RegExp","replace","length","join","feature","key","featureNameSplit","split","last","Boolean","_trigger","createElement","createElementNS","call","apply","arguments","hasOwnProperty","object","property","constructor","_l","res","cbs","i","supportsHtml5Styles","supportsUnknownElements","html5","reSkip","saveClones","expando","expanID","expandoData","addStyleSheet","ownerDocument","cssText","p","parent","getElementsByTagName","innerHTML","insertBefore","lastChild","firstChild","getElements","elements","getExpandoData","data","node","cache","cloneNode","createElem","canHaveChildren","tagUrn","frag","appendChild","shivDocument","shivCSS","hasCSS","createFrag","createDocumentFragment","shivMethods","Function","a","childNodes","e","version","clone","elems","l","addElements","newElements","reMedia","shivNamespace","supportsShivableSheets","docEl","namespaces","parentWindow","applyElement","removeNode","attachEvent","addWrappers","nodes","index","reElements","result","element","attributes","wrapper","specified","setAttribute","nodeValue","style","createWrapper","shivPrint","shivedSheet","wrappers","ownerWindow","printShived","add","removeSheet","imports","sheet","collection","styleSheets","sheets","Array","pop","disabled","media","er","pair","parts","replacement","shivCssText","reverse","removeWrappers","clearTimeout","_removeSheetTimer","module","exports","modElem","elem","mStyle","injectElementWithStyles","rule","callback","testnames","docOverflow","body","mod","div","fake","parseInt","id","styleSheet","createTextNode","background","overflow","ret","parentNode","removeChild","offsetHeight","domToCSS","str","m1","nativeTestProps","props","value","CSS","supports","conditionText","pseudo","prop","getComputedStyle","console","getPropertyValue","error","currentStyle","unshift","testProp","useValue","prefixed","skipValueTest","afterInit","propsLength","before","shift","cleanElems","indexOf","m2","toUpperCase","testProps","featureNames","aliasIdx","nameIdx","featureIdx","aliases","testRunner"],"mappings":"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"}